<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAZGQAAAEACAB4MQAAFgAAACgAAABkAAAAyAAAAAEACAAAAAAAAAAAABMLAAATCwAAAAEAAAAA
        AABrZGEAYFlVAH1LKwBONCQAY0o6AGRLOwBhUUcA/2YAAP9nAgDyYgMA/2gEAP9pBgDlXwYA/2sIAP9s
        CgDYXAkA/20MAP9uDgDMWQwA/3ARAP9xEwC/Vg8A/3IVAP9zFwC/VxIA/3UZAP92GwCyUhMA/3cdAP94
        HwD/eiIApU8WAPJ1IwDlcSQAmUwZANhsJQDMaCYAjEkcAL9jJwCrWyYAsl8oAKlaJgB/Rh8ApVopAJlW
        KgCMUisAckIjAHtKKgB/TSwAZj8mAHJJLQBmRC4AWTwpAFA2JQBZQC8ATDksAEw7MABXRzwAQjImADYu
        KAA/NzEANi8qAD82LwA4MSsAMjMzAD0+PgA2NzcANTY2AEJERQBISksALC4wAE9SVQBSVVgANTc5AFZZ
        XABDRUcAISIjAElLTQBISkwATU9RAF5gYgA4OToARUZHAENERQBCQ0QAPj9AAEhJSgA9P0IARkhLAEpM
        TwBPUVQAVFZZAFNVWABSVFcAXmBjAGlrbgBcXmIASUpMAEZHSQBSU1UATU5QAFNUVgA3ODsASUpNAGdo
        awBjZGgAOjtHADM0SQAAANkAAADYAAAA1gAAANUAAADUAAAA0wAAANIAAADRAAAA0AAAAM8AAADOAAMD
        zgADA8QABgbEAAYGugAJCbkACQmwAAwMrwAMDKcADw+lAA8PnQATE5oAERGLABMTkwAWFpAAFhaKABkZ
        hgAZGYIAGRmAABwcewAcHHYAHR1rABsbYwAfH3EAHx9tACMjZgAjI2QAIyNjACYmXAAmJlkAMTFoACkp
        UgAjI0UAKSlQACQkRgAjI0QANDReAC0tUQArK00AJSU8ACwsRwAsLEYAKipDACUlOwAsLEMAJyczAC8v
        PQAnJzIALy88ABISEwA+Pj8APDw9ADU1NQAzMzMAMjIyAC8vLwAuLi4AKysrAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxq7GxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsTc+sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbExEkGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxMQcbQbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsTEHByVlsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsLGx
        sbExBwcHKlCxsbGxsbGxUKurQV+xsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbCwsbGxMQcHBwk0sbGxsbGxsbGxVquN
        jZ6rULGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGwsLCxsSIHBwcHCT6xsbGxsbGxsbGxQZJ7eYGSq1CxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsLCw
        p1siBwcHBwcPPrGxsbGxsbGxsbGxq4l3bHmBkKZQsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbBLTkA0FQcHBwcHBxVCsbGxsbGxsbGx
        sbFQpIRsbG94g59WsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbFROyIPBwcHBwcHBwcHH1SxsbCwsbGxsbGxsbFWlXlscnZ2gJdlsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsUE3GwcH
        BwcHBwcHBwcHBwcqZbGxsLCwsLCxsbGxsV+ke2x0dnZ2gKaxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxQTQVBwcHBwcHBwcHBwcHBwcHBzGxsbGxsLCw
        sLCwsbGxsaR7bXR2dnZ4kWWxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxqx8HBwcHBwcHBwcHBwcHBwcHBwcJNLGxsbGxsLCwsLCwsbFpnndtc3Z2dnaFprGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbFjNA8HBwcHBwcH
        BwcHBwcHBwcHBwcHBw8+sbGxsbGwsLCwsLCwsVKPbGxwdnZ2dn6fsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbFhKgkHBwcHBwcHBwcHBwcHBwcHBwcHBwcHD6uxsbGx
        sbGwsLCwsLBGqoRsbG10dnZ2ep+xsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbFTKgcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcbQbGxsbGxsbCwsLCwsFeve2xsbHJ2dnZ4
        l7GxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbFkKgcHBwcHBwcHBwcH
        BwcHBwcHBwcHBwcHBwcHByJlsbGxsbGwsLCwsLCwTpZ3bGxscnZ2dnifsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbFYOgkHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHKlCx
        sbGxsbCwsLCwsLBVhmxsbGxydnZ2eqaxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbFMQA8HBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwk0sbGxsbGxsLCwsLCwRqN5bGxsbHR2
        dnZ8prGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGwRCUHBwcHBwcHBwcHBwcH
        BwcHBwcHBwcHBwcHBwcHBwcHCTexsbGxsbGwsLCwsLBOiWxsbGxtdnZ2dn5BsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGwZjsJBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcHBwcP
        PrGxsbGxsbCwsLCwTKN3bGxsbG92dnZ2imWxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsFEfBwcHBwcHBwcHBwcHBwcHBwcHChAUGRkeHh4eHh4eHRkWDhhBsbGxsbGwsLCwsLBVgWxsbGxs
        dHZ2dnaXsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsGY6BwcHBwcHBwcHBwcHBwcH
        DRYeHh4eHh4eHh4eHh4eHh4eHh4gObGxsbGxsbCwsLCwWI1sbGxsbG52dnZ2fEGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsLBiIgcHBwcHBwcHBwcHBwcKGR4eHh4eHh4eHh4eHh4eHh4eHh4g
        BbGxsbGxsbGwsLCwsEajbGxsbGxsdHZ2dnaOsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbBMrwkHBwcHBwcHBwcHBwcRHR4eHh4eHh4eHh4eHh4eHh4eHh4eBbGxsbGxsbGxsbCwsLCwQHdsbGxs
        bHB2dnZ2equxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbCwWC4HBwcHBwcHBwcHBwgZHh4e
        Hh4eHh4eHh4eHh4eHh4eHh4eMLGxsbGxsbGxsbGwsLCwsER9bGxsbGxtdnZ2dnaOsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGwsGIbBwcHBwcHBwcHBwgaHh4eHh4eHh4eHh4eHh4eHh4eHh4eMLGx
        sbGxsbGxsbGxsLCwsLBOgWxsbGxsbHR2dnZ2fkGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGw
        sLCvDAcHBwcHBwcHBwgaHh4eHh4eHh4eHh4eHh4eHh4eHh4eArGxsbGxsbGxsbGxsbGwsLCwTYZsbGxs
        bGxydnZ2dnaXsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsLBmAwcHBwcHBwcHBwcXHh4eHh4e
        Hh4eHh4eHh4eHh4eHh4eArGxsbGxsbGxsbGxsbGxsLCwsE2GbGxsbGxscXZ2dnZ2iLGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsLCwWCoHBwcHBwcHBwcRHh4eHh4eHh4eHh4eHh4eHh4eHh4eL7GxsbGx
        sbGxsbGxsbGxsbCwsLBNhmxsbGxsbG52dnZ2dnxWsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbCw
        sGciBwcHBwcHBwcKHh4eHh4eHh4eHh4eHh4eHh4eHh4eJ7GxsbGxsbGxsbGxsbGxsbGwsLCwTYZsbGxs
        bGxudnZ2dnZ2prGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGwsLBEEgcHBwcHBwcHFh4eHh4eHh4e
        Hh4eHh4eHh4eHh4eJ7GxsbGxsbGxsbGxsbGxsbGxZrCwsGeGbGxsbGxsbnZ2dnZ2dpOxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsLCwRBIHBwcHBwcHCh4eHh4eHh4eHh4tKx4eHh4eHh4eJ7GxsbGxsbGx
        sbGxsbGxsbGxi6+wsLBEfWxsbGxsbGx2dnZ2dnaIsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsLCw
        sK8JBwcHBwcHBxQeHh4eHh4eHh4tZaseHh4eHh4eJ7GxsbGxsbGxsbGxsbGxsbGxjWyvsLCwQHlsbGxs
        bGxtdnZ2dnZ2gF+xsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbCwsLCvBwcHBwcHBwccHh4eHh4eHh4m
        QKevHh4eHh4eKbGxsbGxsbGxsbGxsbGxsbGxlGxsr7CwRqNsbGxsbGxsbnZ2dnZ2dn5QsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGwsLCwrwcHBwcHBwcKHh4eHh4eHh4gPUuwrx4eHh4eIwCxsbGxsbGxsbGx
        sbGxsbGxmndsbK+wsFiNbGxsbGxsbG52dnZ2dnZ6VrGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsLCw
        sK8HBwcHBwcHEB4eHh4eHh4eLESwsK8eHh4eIwGxsbGxsbGxsbGxsbGxsbFJm3dsbGyvsLBRf2xsbGxs
        bGxvdnZ2dnZ2dquxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbCwsLCvBwcHBwcHBxMeHh4eHh4eID1m
        sLCvHh4eIwGxsbGxsbGxsbGxsbGxsbFJnHdsbGxsr7BXnWxsbGxsbGxscXZ2dnZ2dnarsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGwsLCwrwcHBwcHBwcZHh4eHh4eHihVsLCwrx4eIwGxsbGxsbGxsbGxsbGx
        sbGxnHdsbGxsbK+wVYFsbGxsbGxsbHN2dnZ2dnZ2q7GxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsLCw
        sEAJBwcHBwcHGR4eHh4eHh4yS7CwsK8eIwGxsbGxsbGxsbGxsbGxsbGxa3dsbGxsbGyvWJZsbGxsbGxs
        bGx2dnZ2dnZ2dquxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbCwsLBEEgcHBwcHBxkeHh4eHh4eP0yw
        sLCvIAaxsbGxsbGxsbGxsbGxsbGxantsbGxsbGxsq6t7bGxsbGxsbGxudnZ2dnZ2dnarsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGwsLCwRBUHBwcHBwceHh4eHh4eI6mwsLCwrgSxsbGxsbGxsbGxsbGxsbGx
        antsbGxsbGxseauBbGxsbGxsbGxscHZ2dnZ2dnZ2q7GxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsLCw
        sE0iBwcHBwcHHh4eHh4eHiRFsLCwsayxsbGxsbGxsbGxsbGxsbGxantsbGxsbGxsbH+EbGxsbGxsbGxs
        bHV2dnZ2dnZ2fGWxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbCwsLBXLgcHBwcHBxkeHh4eHh4rXbCw
        sbGxsbGxsbGxsbGxsbGxsbGxantsbGxsbGxsbGxsbGxsbGxsbGxsbHB2dnZ2dnZ2dn5QsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGwsLCwTDsHBwcHBwcZHh4eHh4eLFywsbGxsbGxsbGxsbGxsbGxsbGxYnts
        bGxsbGxsbGxsbGxsbGxsbGxsbG12dnZ2dnZ2dnaIsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsLCw
        sLBREgcHBwcHFx4eHh4eHixcsbGxsbGxsbGxsbGxsbGxsbGxToJsbGxsbGxsbGxsbGxsbGxsbGxsbGxy
        dnZ2dnZ2dnZ2jrGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbCwsLCwTiUHBwcHBxMeHh4eHh4sXLGx
        sbGxsbGxsbGxsbGxsbGxToJsbGxsbGxsbGxsbGxsbGxsbGxsbGxvdnZ2dnZ2dnZ2dp+xsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGwsLCwsFc6BwcHBwcOHh4eHh4eLLGxsbGxsbGxsbGxsbGxsbGxToJsbGxs
        bGxsbGxsbGxsbGxsbGxsbGxudnZ2dnZ2dnZ2dnpBsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbCw
        sLCwURUHBwcHCh4eHh4eHiuxsbGxsbGxsbGxsbGxsbGxToJsbGxsbGxsbGxsbGxsbGxsbGxsbGxvdnZ2
        dnZ2dnZ2dnaDX7GxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGwsLCwsFgxBwcHBwccHh4eHh4kULGx
        sbGxsbGxsbGxsbGxWoJsbGxsbGxsbGxsbGxsbGxsbGxsbGxwdnZ2dnZ2dnZ2dnZ2kbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsLCwsLCnQA8HBwcHFh4eHh4eIUGxsbGxsbGxsbGxsbGxWYxsbGxsbGxs
        bGxsbGxsbGxsbGxsbG1zdnZ2dnZ2dnZ2dnZ2ekGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGw
        sLCwsE0xBwcHBwseHh4eHh44sbGxsbGxsbGxsbGxWYxsbGxsbGxsbGxsbGxsbGxsbGxsbXF2dnZ2dnZ2
        dnZ2dnZ2doqxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsLCwsLCnQBUHBwcHGR4eHh4eMLGx
        sbGxsbGxsbGxsaJsbGxsbGxsbGxsbGxsbGxsbGxscnZ2dnZ2dnZ2dnZ2dnZ2dnimsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbCwsLCwsFc7CQcHBw0eHh4eHiZWsbGxsbGxsbGxsadVh3Nwbm5ubm5u
        bm5ubm5wcnR0dnZ2dnZ2dnZ2dnZ2dnZ2dnaIULGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sLCwsLCwYi4HBwcHFx4eHh4ePLGxsbGxsbGxsbCwRkCDdnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2
        dnZ2dnZ6prGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbCwsLCwsKdRHwcHBwgcHh4eHixQ
        sbGxsbGxsbCwsLBmpXx2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2kbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsLCwsLCwRkAPBwcHCx0eHh4gPLGxsbGxsbCwsLCwsEulenZ2dnZ2
        dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2g0GxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGwsLCwsLBLOwwHBwcQHh4eHiZBsbGxsbGwsLCwsLCwZ5l4dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2
        dnZ2eqaxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsLCwsLCwsGc6DAcHBxAeHh4e
        M1+xsbGxsbCwsLCwsLBOk3Z2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dpexsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGwsLCwsLCwTjoMBwcHDR0eHiA8sbGxsbGxsLCwsLCwp1WOdnZ2
        dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2do5lsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbCwsLCwsLBnOg8HBwcLGh4eK0GxsbGxsbGwsLCwsLCnQIN2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2
        eJNlsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsLCwsLCwsEs7EgcHBwcR
        HR4wQbGxsbGxsbCwsLCwsEZAgHZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2fqBQsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGwsLCwsLCwZkAiBwcHBwsaHjZlsbGxsbGwsLCwsLCwV6V8
        dnZ2dnZ2dnZ2dnZ2dnZ2dnZ4iK2xsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbCwsLCwsLBMRDUPBwcHCx0gNmWxsbGxsbCwsLCwsLBYoXh2dnZ2dnZ2dnZ2dnZ2dniFoaix
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsLCwsLCwsLBYQyIJ
        BwcLHSA2ZbGxsbGxsLCwsLCwsE6ZeHZ2dnZ2dnZ2dnZ2eoilUUqxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGwsLCwsLCwsExPPiIJBxAeHi1BsbGxsbGwsLCwsLCw
        RI52dnZ2dnZ2dniDk69ER7GxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbCwsLCwsLCwsLFoPioSFh4eJDhWsbGxsbCwsLCwsKdViHZ2dnZ2doOvVVinsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbCwsLCwsLCw
        sbGxQTwwIR4eKzxfsbGxsLCwsLCwRkCDdnZ2dnaITbCxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsLCwsLCwsLCxsbGxsas4LCQgMKuxsbGwsLCw
        sLBGr3x2dnZ2ikixsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsLCwsLCwsLGxsbGxsbFWqzMyPEFgp7CwsLCwsEulfHZ2dpOxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsLCw
        sLCwsbGxsbGxsbGxsVBBrFKwsLCwsLCwTZh4dnaTsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbCwsLCwsbGxsbGxsbGxsbGxsbCw
        sLCwsLBek3Z2k7GxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGwsLCwsbGxsbGxsbGxsbGxsLCwsLCwsWWOdpOxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsLCwsbGxsbGxsbGxsbGwsLCwsLGxVoWTsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbCwsLCxsbFBprGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGwsLCwsbGxsauxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbCwsLGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsLCxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGwsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx
        sbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsf////////////////AA
        AAD////////////////wAAAA////////////////8AAAAP////////////////AAAAD/////////////
        ///wAAAA////////////////8AAAAP////////////////AAAAD////////////////wAAAA////////
        ////////8AAAAP////////////////AAAAD////////////////wAAAA////////////////8AAAAP//
        ///3//////////AAAAD/////8//////////wAAAA//////H/////////8AAAAP/////w//////////AA
        AAD/////8H/////////wAAAA/////vA/g///////8AAAAP////5wP+A///////AAAAD////+MB/4B///
        ///wAAAA/////gAP/gD/////8AAAAP////4AB/8AP/////AAAAD////+AAM/wA/////wAAAA////+AAB
        g+AH////8AAAAP///+AAAeB4Af////AAAAD////AAAD4GAD////wAAAA////AAAAfAQAf///8AAAAP//
        /gAAAD8AAD////AAAAD///wAAAAfgAAf///wAAAA///4AAAAD4AAD///8AAAAP//8AAAAAfAAAf///AA
        AAD//+AAAAAH4AAD///wAAAA///AAAAAA/AAAf//8AAAAP//gAAAAAH4AAD///AAAAD//4AAAAAA+AAA
        ///wAAAA//8AAAAAAPwAAH//8AAAAP/+AAAAAAH8AAB///AAAAD//gAAAAAD/gAAP//wAAAA//wAAAAA
        B/4AAD//8AAAAP/8AAAAAA/+AAAf//AAAAD/+AAAAAAf/wAAH//wAAAA//gAAAAAP/8AAB//8AAAAP/w
        AAAAAH//AAAP//AAAAD/8AAAAAD//wAAD//wAAAA//AAAAAB//8AAA//8AAAAP/wAAAAA//+AAAP//AA
        AAD/4AAAAAf//AAAB//wAAAA/+AAAAAP//gAAAf/8AAAAP/gAAAAD//wAAAH//AAAAD/4AAAAB//wAAA
        B//wAAAA/+AAAAA//4AAAAf/8AAAAP/gAAAAf/+AAAAH//AAAAD/4AAAAP//AAAAB//wAAAA/+AAAAH/
        /gAAAAf/8AAAAP/gAAAD//wAAAAH//AAAAD/4AAAF//4AAAAB//wAAAA/+AAAD//8AAAAAf/8AAAAP/g
        AAB//+AAAAAP//AAAAD/4AAA///AAAAAD//wAAAA/+AAAP//gAAAAA//8AAAAP/gAAH//wAAAAAP//AA
        AAD/8AAB//4AAAAAD//wAAAA//AAAP/8AAAAAB//8AAAAP/wAAD/+AAAAAAf//AAAAD/+AAA//AAAAAA
        P//wAAAA//gAAP/wAAAAAD//8AAAAP/4AAB/4AAAAAA///AAAAD//AAAf8AAAAAAf//wAAAA//wAAD+A
        AAAAAP//8AAAAP/+AAA/AAAAAAD///AAAAD//wAAHwAAAAAB///wAAAA//8AAA+AAAAAA///8AAAAP//
        gAAPwAAAAAP///AAAAD//8AAB+AAAAAH///wAAAA///gAAPwAAAAD///8AAAAP//8AAB8AAAAD////AA
        AAD///gAAPgAAAB////wAAAA///8AAB8AAAA////8AAAAP///gAAPgAAA/////AAAAD///8AQA8AAA//
        ///wAAAA////wDgDgAA/////8AAAAP///+AfAcAAf/////AAAAD////4D+AAAP/////wAAAA/////gf+
        AAD/////8AAAAP/////B//AA//////AAAAD/////+H/4EP/////wAAAA//////8f/Bj/////8AAAAP//
        //////4c//////AAAAD////////+Hv/////wAAAA/////////x//////8AAAAP////////+f//////AA
        AAD/////////3//////wAAAA////////////////8AAAAP////////////////AAAAD/////////////
        ///wAAAA////////////////8AAAAP////////////////AAAAD////////////////wAAAA////////
        ////////8AAAAP////////////////AAAAA=
</value>
  </data>
</root>